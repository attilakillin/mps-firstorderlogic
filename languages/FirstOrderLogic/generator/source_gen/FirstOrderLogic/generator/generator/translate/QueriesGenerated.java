package FirstOrderLogic.generator.generator.translate;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.SourceNodeQuery;
import jetbrains.mps.generator.impl.query.QueryKeyImpl;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.generator.impl.query.InlineSwitchCaseCondition;
import jetbrains.mps.generator.template.InlineSwitchCaseContext;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static boolean rule_Condition_0_0(final BaseMappingRuleContext _context) {
    return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(SNodeOperations.getParent(_context.getNode()))), CONCEPTS.KnowledgeBaseEntry$HX);
  }
  public static boolean rule_Condition_0_1(final BaseMappingRuleContext _context) {
    return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(SNodeOperations.getParent(_context.getNode()))), CONCEPTS.KnowledgeBaseEntry$HX);
  }
  public static boolean rule_Condition_0_2(final BaseMappingRuleContext _context) {
    return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(SNodeOperations.getParent(_context.getNode()))), CONCEPTS.KnowledgeBaseEntry$HX);
  }
  public static boolean rule_Condition_0_3(final BaseMappingRuleContext _context) {
    return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(SNodeOperations.getParent(_context.getNode()))), CONCEPTS.KnowledgeBaseEntry$HX);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_4_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.ref$3iQK), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_5_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.predicate$FL91), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_6_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.ref$3iQK), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_12_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.ref$3iQK), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_13_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.predicate$FL91), PROPS.name$MnvL);
  }
  public static SNode sourceNodeQuery_7_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$tEgL);
  }
  public static SNode sourceNodeQuery_7_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$g53S);
  }
  public static SNode sourceNodeQuery_11_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.term1$Q5Mf);
  }
  public static SNode sourceNodeQuery_11_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.term2$Q6gh);
  }
  public static SNode sourceNodeQuery_14_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.term1$Q5Mf);
  }
  public static SNode sourceNodeQuery_14_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.term2$Q6gh);
  }
  public static SNode sourceNodeQuery_18_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.statement$pxjq);
  }
  public static SNode sourceNodeQuery_19_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.statement$pxjq);
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> statements = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode entry : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.content$_J4j)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(it)), CONCEPTS.KnowledgeBaseEntry$HX);
      }
    })) {
      statements.addAll(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(entry, CONCEPTS.KnowledgeBaseEntry$HX), LINKS.statements$MO7q)).toListSequence());
    }
    return statements;
  }
  public static Iterable<SNode> sourceNodesQuery_5_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.parameters$Ifhz);
  }
  public static Iterable<SNode> sourceNodesQuery_12_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.parameters$Jqsy);
  }
  public static Iterable<SNode> sourceNodesQuery_13_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.parameters$Ifhz);
  }
  public static void mappingScript_CodeBlock_2(final MappingScriptContext _context) {
    boolean repeat;
    do {
      repeat = false;
      for (SNode orig : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.NegatedStatement$8l))) {
        SAbstractConcept cncpt = SNodeOperations.getConcept(SLinkOperations.getTarget(orig, LINKS.statement$pxjq));
        switch (conceptIndex.index(cncpt)) {
          case 0:
            if (true) {
              {
                // not all x -> exists (not x) 
                SNode outer = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x1bf6498e1734c76cL, "FirstOrderLogic.structure.ExistsQuantifiedStatement"));
                SLinkOperations.getChildren(outer, LINKS.quantors$jFRS).addAll(SLinkOperations.getChildren(SNodeOperations.as(SLinkOperations.getTarget(orig, LINKS.statement$pxjq), CONCEPTS.AllQuantifiedStatement$Ex), LINKS.quantors$jFRS));

                SNode negated = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x36e551eaf2c8dae6L, "FirstOrderLogic.structure.NegatedStatement"));
                SLinkOperations.setTarget(negated, LINKS.statement$pxjq, SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(orig, LINKS.statement$pxjq), CONCEPTS.AllQuantifiedStatement$Ex), LINKS.statement$PMeT));
                SLinkOperations.setTarget(outer, LINKS.statement$PMeT, negated);

                SNodeOperations.replaceWithAnother(orig, outer);
                repeat = true;
              }
            }
            break;
          case 1:
            if (true) {
              {
                // not (a and b) -> (not a) or (not b) 
                SNode outer = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5d4b7b1928d5d80fL, "FirstOrderLogic.structure.OrOperatorStatement"));
                SNode left = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x36e551eaf2c8dae6L, "FirstOrderLogic.structure.NegatedStatement"));
                SNode right = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x36e551eaf2c8dae6L, "FirstOrderLogic.structure.NegatedStatement"));
                SLinkOperations.setTarget(left, LINKS.statement$pxjq, SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(orig, LINKS.statement$pxjq), CONCEPTS.AndOperatorStatement$2T), LINKS.left$tEgL));
                SLinkOperations.setTarget(right, LINKS.statement$pxjq, SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(orig, LINKS.statement$pxjq), CONCEPTS.AndOperatorStatement$2T), LINKS.right$g53S));
                SLinkOperations.setTarget(outer, LINKS.left$tEgL, left);
                SLinkOperations.setTarget(outer, LINKS.right$g53S, right);
                SNodeOperations.replaceWithAnother(orig, outer);
                repeat = true;
              }
            }
            break;
          case 2:
            if (true) {
              {
                // not exists x -> all (not x) 
                SNode outer = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x13ba598d20c99906L, "FirstOrderLogic.structure.AllQuantifiedStatement"));
                SLinkOperations.getChildren(outer, LINKS.quantors$jFRS).addAll(SLinkOperations.getChildren(SNodeOperations.as(SLinkOperations.getTarget(orig, LINKS.statement$pxjq), CONCEPTS.ExistsQuantifiedStatement$jU), LINKS.quantors$jFRS));

                SNode negated = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x36e551eaf2c8dae6L, "FirstOrderLogic.structure.NegatedStatement"));
                SLinkOperations.setTarget(negated, LINKS.statement$pxjq, SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(orig, LINKS.statement$pxjq), CONCEPTS.ExistsQuantifiedStatement$jU), LINKS.statement$PMeT));
                SLinkOperations.setTarget(outer, LINKS.statement$PMeT, negated);

                SNodeOperations.replaceWithAnother(orig, outer);
                repeat = true;
              }
            }
            break;
          case 3:
            if (true) {
              {
                SNode outer = SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(orig, LINKS.statement$pxjq), CONCEPTS.NegatedStatement$8l), LINKS.statement$pxjq);
                SNodeOperations.replaceWithAnother(orig, outer);
                repeat = true;
              }
            }
            break;
          case 4:
            if (true) {
              {
                // not (a or b) -> (not a) and (not b) 
                SNode outer = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x6996afbaab621954L, "FirstOrderLogic.structure.AndOperatorStatement"));
                SNode left = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x36e551eaf2c8dae6L, "FirstOrderLogic.structure.NegatedStatement"));
                SNode right = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x36e551eaf2c8dae6L, "FirstOrderLogic.structure.NegatedStatement"));
                SLinkOperations.setTarget(left, LINKS.statement$pxjq, SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(orig, LINKS.statement$pxjq), CONCEPTS.OrOperatorStatement$L5), LINKS.left$tEgL));
                SLinkOperations.setTarget(right, LINKS.statement$pxjq, SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(orig, LINKS.statement$pxjq), CONCEPTS.OrOperatorStatement$L5), LINKS.right$g53S));
                SLinkOperations.setTarget(outer, LINKS.left$tEgL, left);
                SLinkOperations.setTarget(outer, LINKS.right$g53S, right);
                SNodeOperations.replaceWithAnother(orig, outer);
                repeat = true;
              }
            }
            break;
          default:
        }
      }

    } while (repeat);
  }
  public static void mappingScript_CodeBlock_3(final MappingScriptContext _context) {
    int cnt = 0;
    for (SNode statement : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.AllQuantifiedStatement$Ex))) {
      for (SNode quant : ListSequence.fromList(SLinkOperations.getChildren(statement, LINKS.quantors$jFRS))) {
        SPropertyOperations.assign(quant, PROPS.name$MnvL, SPropertyOperations.getString(quant, PROPS.name$MnvL).concat(String.valueOf(cnt)));
        cnt++;
      }
    }
    for (SNode statement : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.ExistsQuantifiedStatement$jU))) {
      for (SNode quant : ListSequence.fromList(SLinkOperations.getChildren(statement, LINKS.quantors$jFRS))) {
        SPropertyOperations.assign(quant, PROPS.name$MnvL, SPropertyOperations.getString(quant, PROPS.name$MnvL).concat(String.valueOf(cnt)));
        cnt++;
      }
    }

  }
  public static void mappingScript_CodeBlock_8(final MappingScriptContext _context) {
    for (SNode parens : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.ParenthesesStatement$zg))) {
      SNodeOperations.replaceWithAnother(parens, SLinkOperations.getTarget(parens, LINKS.statement$TjGf));
    }
  }
  public static void mappingScript_CodeBlock_9(final MappingScriptContext _context) {
    boolean repeat;
    do {
      repeat = false;
      for (SNode equiv : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.EqualsOperatorStatement$S_))) {
        SNode ltr = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5d4b7b1928f45d97L, "FirstOrderLogic.structure.ImpliesOperatorStatement"));
        SNode rtl = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5d4b7b1928f45d97L, "FirstOrderLogic.structure.ImpliesOperatorStatement"));
        SLinkOperations.setTarget(ltr, LINKS.left$tEgL, SNodeOperations.copyNode(SLinkOperations.getTarget(equiv, LINKS.left$tEgL)));
        SLinkOperations.setTarget(ltr, LINKS.right$g53S, SNodeOperations.copyNode(SLinkOperations.getTarget(equiv, LINKS.right$g53S)));
        SLinkOperations.setTarget(rtl, LINKS.left$tEgL, SNodeOperations.copyNode(SLinkOperations.getTarget(equiv, LINKS.right$g53S)));
        SLinkOperations.setTarget(rtl, LINKS.right$g53S, SNodeOperations.copyNode(SLinkOperations.getTarget(equiv, LINKS.left$tEgL)));
        SNode wrapper = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x6996afbaab621954L, "FirstOrderLogic.structure.AndOperatorStatement"));
        SLinkOperations.setTarget(wrapper, LINKS.left$tEgL, ltr);
        SLinkOperations.setTarget(wrapper, LINKS.right$g53S, rtl);
        SNodeOperations.replaceWithAnother(equiv, wrapper);
        repeat = true;
      }
    } while (repeat);

  }
  public static void mappingScript_CodeBlock_10(final MappingScriptContext _context) {
    for (SNode knows : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.KnowledgeBaseEntry$HX))) {
      boolean repeat;
      do {
        repeat = false;
        for (SNode and : ListSequence.fromList(SNodeOperations.getChildren(knows)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(it)), CONCEPTS.AndOperatorStatement$2T);
          }
        })) {
          repeat = true;
          SNodeOperations.insertPrevSiblingChild(and, SLinkOperations.getTarget(SNodeOperations.as(and, CONCEPTS.AndOperatorStatement$2T), LINKS.left$tEgL));
          SNodeOperations.replaceWithAnother(and, SLinkOperations.getTarget(SNodeOperations.as(and, CONCEPTS.AndOperatorStatement$2T), LINKS.right$g53S));
        }
      } while (repeat);
    }
  }
  public static void mappingScript_CodeBlock_15(final MappingScriptContext _context) {
    boolean repeat;
    do {
      repeat = false;
      for (SNode quant : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.AllQuantifiedStatement$Ex))) {
        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(SNodeOperations.getParent(quant))), CONCEPTS.AOperatorStatement$ft) || SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(SNodeOperations.getParent(quant))), CONCEPTS.ExistsQuantifiedStatement$jU)) {
          SNode parent = SNodeOperations.as(SNodeOperations.getParent(quant), CONCEPTS.AStatement$1q);
          SNode copy = SNodeOperations.copyNode(quant);
          SNodeOperations.replaceWithAnother(quant, SLinkOperations.getTarget(quant, LINKS.statement$PMeT));
          SLinkOperations.setTarget(copy, LINKS.statement$PMeT, SNodeOperations.copyNode(parent));
          SNodeOperations.replaceWithAnother(parent, copy);
          repeat = true;
        }
      }
    } while (repeat);

    do {
      repeat = false;
      for (SNode quant : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.ExistsQuantifiedStatement$jU))) {
        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(SNodeOperations.getParent(quant))), CONCEPTS.AOperatorStatement$ft)) {
          SNode parent = SNodeOperations.as(SNodeOperations.getParent(quant), CONCEPTS.AStatement$1q);
          SNode copy = SNodeOperations.copyNode(quant);
          SNodeOperations.replaceWithAnother(quant, SLinkOperations.getTarget(quant, LINKS.statement$PMeT));
          SLinkOperations.setTarget(copy, LINKS.statement$PMeT, SNodeOperations.copyNode(parent));
          SNodeOperations.replaceWithAnother(parent, copy);
          repeat = true;
        }
      }
    } while (repeat);
  }
  public static void mappingScript_CodeBlock_16(final MappingScriptContext _context) {
    int cnt = 0;

    for (SNode exists : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.ExistsQuantifiedStatement$jU))) {
      for (final SNode var : ListSequence.fromList(SLinkOperations.getChildren(exists, LINKS.quantors$jFRS))) {
        SNode skolem = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5c35fb00b217e4L, "FirstOrderLogic.structure.Function"));
        SPropertyOperations.assign(skolem, PROPS.name$MnvL, "skolem_function" + String.valueOf(cnt));

        SNode skolem_ref = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5c35fb00b2183aL, "FirstOrderLogic.structure.FunctionReference"));
        SLinkOperations.setTarget(skolem_ref, LINKS.ref$3iQK, skolem);

        SNode parent = SNodeOperations.getParent(exists);
        while (SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(parent)), CONCEPTS.ExistsQuantifiedStatement$jU)) {
          parent = SNodeOperations.getParent(parent);
        }
        while (SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(parent)), CONCEPTS.AllQuantifiedStatement$Ex)) {
          for (SNode allvar : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(parent, CONCEPTS.AllQuantifiedStatement$Ex), LINKS.quantors$jFRS))) {
            SNode reference = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x13ba598d20cb7c36L, "FirstOrderLogic.structure.VariableReference"));
            SLinkOperations.setTarget(reference, LINKS.ref$3iQK, allvar);
            ListSequence.fromList(SLinkOperations.getChildren(skolem_ref, LINKS.parameters$Jqsy)).addElement(reference);
          }
          parent = SNodeOperations.getParent(parent);
        }

        SNode toReplaceWith;
        if (SLinkOperations.getChildren(skolem_ref, LINKS.parameters$Jqsy).size() > 0) {
          toReplaceWith = skolem_ref;
        } else {
          SNode constant = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5c35fb00abee10L, "FirstOrderLogic.structure.Constant"));
          SPropertyOperations.assign(constant, PROPS.name$MnvL, "skolem_constant" + String.valueOf(cnt));
          SNode const_ref = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5c35fb00b9b606L, "FirstOrderLogic.structure.ConstantReference"));
          SLinkOperations.setTarget(const_ref, LINKS.ref$3iQK, constant);
          toReplaceWith = const_ref;
        }

        for (SNode ref : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.VariableReference$al)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SPropertyOperations.getString(SLinkOperations.getTarget(it, LINKS.ref$3iQK), PROPS.name$MnvL) == SPropertyOperations.getString(var, PROPS.name$MnvL);
          }
        })) {
          SNodeOperations.replaceWithAnother(ref, SNodeOperations.copyNode(toReplaceWith));
        }
        cnt++;
      }
      SNodeOperations.replaceWithAnother(exists, SLinkOperations.getTarget(exists, LINKS.statement$PMeT));
    }
  }
  public static void mappingScript_CodeBlock_17(final MappingScriptContext _context) {
    for (SNode know : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.KnowledgeBaseEntry$HX))) {
      boolean repeat;
      do {
        repeat = false;
        for (SNode quant : ListSequence.fromList(SNodeOperations.getChildren(know)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(it)), CONCEPTS.AllQuantifiedStatement$Ex);
          }
        })) {
          SNodeOperations.replaceWithAnother(quant, SLinkOperations.getTarget(SNodeOperations.as(quant, CONCEPTS.AllQuantifiedStatement$Ex), LINKS.statement$PMeT));
          repeat = true;
        }
      } while (repeat);
    }
  }
  private final Map<String, ScriptCodeBlock> mscbMethods = new HashMap<String, ScriptCodeBlock>();
  {
    int i = 0;
    mscbMethods.put("7076127368651552628", new SCB(i++));
    mscbMethods.put("8525279030024589765", new SCB(i++));
    mscbMethods.put("8525279030027778944", new SCB(i++));
    mscbMethods.put("8525279030027815987", new SCB(i++));
    mscbMethods.put("8525279030027880008", new SCB(i++));
    mscbMethods.put("8525279030028713553", new SCB(i++));
    mscbMethods.put("8525279030029005393", new SCB(i++));
    mscbMethods.put("8525279030029006133", new SCB(i++));
  }
  @Override
  @NotNull
  public ScriptCodeBlock getScriptCodeBlock(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(mscbMethods.containsKey(id))) {
      return super.getScriptCodeBlock(identity);
    }
    return mscbMethods.get(id);
  }
  private static class SCB implements ScriptCodeBlock {
    private final int methodKey;
    public SCB(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public void invoke(MappingScriptContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mappingScript_CodeBlock_2(ctx);
          return;
        case 1:
          QueriesGenerated.mappingScript_CodeBlock_3(ctx);
          return;
        case 2:
          QueriesGenerated.mappingScript_CodeBlock_8(ctx);
          return;
        case 3:
          QueriesGenerated.mappingScript_CodeBlock_9(ctx);
          return;
        case 4:
          QueriesGenerated.mappingScript_CodeBlock_10(ctx);
          return;
        case 5:
          QueriesGenerated.mappingScript_CodeBlock_15(ctx);
          return;
        case 6:
          QueriesGenerated.mappingScript_CodeBlock_16(ctx);
          return;
        case 7:
          QueriesGenerated.mappingScript_CodeBlock_17(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("There's no code block with method index %d ", methodKey));
      }
    }
  }
  private final Map<String, SourceNodeQuery> snqMethods = new HashMap<String, SourceNodeQuery>();
  {
    int i = 0;
    snqMethods.put("8525279030027157340", new SNQ(i++));
    snqMethods.put("8525279030027157032", new SNQ(i++));
    snqMethods.put("8525279030028484266", new SNQ(i++));
    snqMethods.put("8525279030028486948", new SNQ(i++));
    snqMethods.put("8525279030028656108", new SNQ(i++));
    snqMethods.put("8525279030028656416", new SNQ(i++));
    snqMethods.put("6036983070999913269", new SNQ(i++));
    snqMethods.put("6036983070999830380", new SNQ(i++));
  }
  @NotNull
  @Override
  public SourceNodeQuery getSourceNodeQuery(@NotNull QueryKey identity) {
    final String id = ((QueryKeyImpl) identity).getQueryNodeId().toString();
    if (!(snqMethods.containsKey(id))) {
      return super.getSourceNodeQuery(identity);
    }
    return snqMethods.get(id);
  }
  private static class SNQ implements SourceNodeQuery {
    private final int methodKey;
    public SNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull SourceSubstituteMacroNodeContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.sourceNodeQuery_7_0(ctx);
        case 1:
          return QueriesGenerated.sourceNodeQuery_7_1(ctx);
        case 2:
          return QueriesGenerated.sourceNodeQuery_11_0(ctx);
        case 3:
          return QueriesGenerated.sourceNodeQuery_11_1(ctx);
        case 4:
          return QueriesGenerated.sourceNodeQuery_14_0(ctx);
        case 5:
          return QueriesGenerated.sourceNodeQuery_14_1(ctx);
        case 6:
          return QueriesGenerated.sourceNodeQuery_18_0(ctx);
        case 7:
          return QueriesGenerated.sourceNodeQuery_19_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("8525279030025584257", new SNsQ(i++));
    snsqMethods.put("8525279030026061249", new SNsQ(i++));
    snsqMethods.put("8525279030028594615", new SNsQ(i++));
    snsqMethods.put("8525279030028654839", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    final String id = ((QueryKeyImpl) identity).getQueryNodeId().toString();
    if (!(snsqMethods.containsKey(id))) {
      return super.getSourceNodesQuery(identity);
    }
    return snsqMethods.get(id);
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_5_0(ctx));
        case 2:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_12_0(ctx));
        case 3:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_13_0(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("8525279030027692876", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_Sheet"));
    pvqMethods.put("8525279030026684196", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "name"));
    pvqMethods.put("8525279030026690517", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "name"));
    pvqMethods.put("8525279030029813602", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "name"));
    pvqMethods.put("8525279030028590676", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "name"));
    pvqMethods.put("8525279030028650743", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "name"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(pvqMethods.containsKey(id))) {
      return super.getPropertyValueQuery(identity);
    }
    return pvqMethods.get(id);
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_4_0(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_5_0(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_6_0(ctx);
        case 4:
          return QueriesGenerated.propertyMacro_GetValue_12_0(ctx);
        case 5:
          return QueriesGenerated.propertyMacro_GetValue_13_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, InlineSwitchCaseCondition> isccMethods = new HashMap<String, InlineSwitchCaseCondition>();
  {
    int i = 0;
    isccMethods.put("8525279030027034672", new ISCC(i++));
    isccMethods.put("8525279030028655831", new ISCC(i++));
    isccMethods.put("8525279030027151120", new ISCC(i++));
    isccMethods.put("6036983070999830106", new ISCC(i++));
  }
  @NotNull
  @Override
  public InlineSwitchCaseCondition getInlineSwitchCaseCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(isccMethods.containsKey(id))) {
      return super.getInlineSwitchCaseCondition(identity);
    }
    return isccMethods.get(id);
  }
  private static class ISCC implements InlineSwitchCaseCondition {
    private final int methodKey;
    public ISCC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull InlineSwitchCaseContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_0_0(ctx);
        case 1:
          return QueriesGenerated.rule_Condition_0_1(ctx);
        case 2:
          return QueriesGenerated.rule_Condition_0_2(ctx);
        case 3:
          return QueriesGenerated.rule_Condition_0_3(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for inline switch's case %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x13ba598d20c99906L), MetaIdFactory.conceptId(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x6996afbaab621954L), MetaIdFactory.conceptId(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x1bf6498e1734c76cL), MetaIdFactory.conceptId(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x36e551eaf2c8dae6L), MetaIdFactory.conceptId(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5d4b7b1928d5d80fL)).seal();

  private static final class CONCEPTS {
    /*package*/ static final SConcept KnowledgeBaseEntry$HX = MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x636efe58094cc959L, "FirstOrderLogic.structure.KnowledgeBaseEntry");
    /*package*/ static final SConcept AllQuantifiedStatement$Ex = MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x13ba598d20c99906L, "FirstOrderLogic.structure.AllQuantifiedStatement");
    /*package*/ static final SConcept AndOperatorStatement$2T = MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x6996afbaab621954L, "FirstOrderLogic.structure.AndOperatorStatement");
    /*package*/ static final SConcept ExistsQuantifiedStatement$jU = MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x1bf6498e1734c76cL, "FirstOrderLogic.structure.ExistsQuantifiedStatement");
    /*package*/ static final SConcept NegatedStatement$8l = MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x36e551eaf2c8dae6L, "FirstOrderLogic.structure.NegatedStatement");
    /*package*/ static final SConcept OrOperatorStatement$L5 = MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5d4b7b1928d5d80fL, "FirstOrderLogic.structure.OrOperatorStatement");
    /*package*/ static final SConcept ParenthesesStatement$zg = MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x36e551eaf2ccfec9L, "FirstOrderLogic.structure.ParenthesesStatement");
    /*package*/ static final SConcept EqualsOperatorStatement$S_ = MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5d4b7b1928f45dd7L, "FirstOrderLogic.structure.EqualsOperatorStatement");
    /*package*/ static final SConcept AOperatorStatement$ft = MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x13ba598d20c7b087L, "FirstOrderLogic.structure.AOperatorStatement");
    /*package*/ static final SConcept AStatement$1q = MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x13ba598d20c7b07fL, "FirstOrderLogic.structure.AStatement");
    /*package*/ static final SConcept VariableReference$al = MetaAdapterFactory.getConcept(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x13ba598d20cb7c36L, "FirstOrderLogic.structure.VariableReference");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink ref$3iQK = MetaAdapterFactory.getReferenceLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5c35fb00b21835L, 0x1474d1fc6f086922L, "ref");
    /*package*/ static final SReferenceLink predicate$FL91 = MetaAdapterFactory.getReferenceLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x523a606984019bbaL, 0x523a606984019bc2L, "predicate");
    /*package*/ static final SContainmentLink left$tEgL = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x13ba598d20c7b087L, 0x13ba598d20c7b08aL, "left");
    /*package*/ static final SContainmentLink right$g53S = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x13ba598d20c7b087L, 0x13ba598d20ca3ae6L, "right");
    /*package*/ static final SContainmentLink term1$Q5Mf = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x636efe58094ad65bL, 0x636efe58094ad65cL, "term1");
    /*package*/ static final SContainmentLink term2$Q6gh = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x636efe58094ad65bL, 0x636efe58094ad65eL, "term2");
    /*package*/ static final SContainmentLink statement$pxjq = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x36e551eaf2c8dae6L, 0x36e551eaf2c8dae7L, "statement");
    /*package*/ static final SContainmentLink statements$MO7q = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x636efe58094cc959L, 0x636efe58094cc95aL, "statements");
    /*package*/ static final SContainmentLink content$_J4j = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5c35fb00ac843eL, 0x5c35fb00ac8464L, "content");
    /*package*/ static final SContainmentLink parameters$Ifhz = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x523a606984019bbaL, 0x523a606984019bc4L, "parameters");
    /*package*/ static final SContainmentLink parameters$Jqsy = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x5c35fb00b2183aL, 0x5c35fb00b7f555L, "parameters");
    /*package*/ static final SContainmentLink quantors$jFRS = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x13ba598d20c998f8L, 0x13ba598d20c99902L, "quantors");
    /*package*/ static final SContainmentLink statement$PMeT = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x13ba598d20c998f8L, 0x13ba598d20ca3aebL, "statement");
    /*package*/ static final SContainmentLink statement$TjGf = MetaAdapterFactory.getContainmentLink(0x5d8a3d04c5e547e4L, 0x806d03da42a8c2cbL, 0x36e551eaf2ccfec9L, 0x36e551eaf2ccfecaL, "statement");
  }
}
