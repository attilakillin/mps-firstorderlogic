package PrologProxy.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import PrologProxy.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.Atom:
        return new Atom_TextGen();
      case LanguageConceptSwitch.CompoundTerm:
        return new CompoundTerm_TextGen();
      case LanguageConceptSwitch.Fact:
        return new Fact_TextGen();
      case LanguageConceptSwitch.FunctionsTerm:
        return new FunctionsTerm_TextGen();
      case LanguageConceptSwitch.NegatedFact:
        return new NegatedFact_TextGen();
      case LanguageConceptSwitch.PrologFile:
        return new PrologFile_TextGen();
      case LanguageConceptSwitch.Rule:
        return new Rule_TextGen();
      case LanguageConceptSwitch.Variable:
        return new Variable_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.PrologFile$PA)) {
        String fname = getFileName_PrologFile(root);
        String ext = getFileExtension_PrologFile(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_PrologFile(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_PrologFile(SNode node) {
    return "pl";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept PrologFile$PA = MetaAdapterFactory.getConcept(0xc89da2859ac54e3cL, 0x9fcfeb4b39236f25L, 0x62337459d1e11564L, "PrologProxy.structure.PrologFile");
  }
}
